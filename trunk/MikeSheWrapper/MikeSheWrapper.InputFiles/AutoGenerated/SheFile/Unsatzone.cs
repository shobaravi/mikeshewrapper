using System;
using System.Collections.Generic;
using DHI.Generic.MikeZero;

namespace MikeSheWrapper.InputFiles
{
  /// <summary>
  /// This is an autogenerated class. Do not edit. 
  /// If you want to add methods create a new partial class in another file
  /// </summary>
  public partial class Unsatzone: PFSMapper
  {

    private UZSoilProfiles _uZSoilProfiles;
    private TwoLayerUZSoilProperties _twoLayerUZSoilProperties;
    private Topography _eTSurfaceDepth;
    private InitialMass _macropore_Transfer_Coeff;
    private InitialMass _decay_Processes;
    private InitialMass _sorption_Processes;
    private UZGroundWaterDepthList _uZGroundWaterDepthList;
    private Initial_Conditions _initial_Conditions;
    private Topography _specifiedClassification;
    private Topography _partialAutomatic;

    internal Unsatzone(PFSSection Section)
    {
      _pfsHandle = Section;

      for (int i = 1; i <= Section.GetSectionsNo(); i++)
      {
        PFSSection sub = Section.GetSection(i);
        switch (sub.Name)
        {
        case "UZSoilProfiles":
          _uZSoilProfiles = new UZSoilProfiles(sub);
          break;
        case "TwoLayerUZSoilProperties":
          _twoLayerUZSoilProperties = new TwoLayerUZSoilProperties(sub);
          break;
        case "ETSurfaceDepth":
          _eTSurfaceDepth = new Topography(sub);
          break;
        case "Macropore_Transfer_Coeff":
          _macropore_Transfer_Coeff = new InitialMass(sub);
          break;
        case "Decay_Processes":
          _decay_Processes = new InitialMass(sub);
          break;
        case "Sorption_Processes":
          _sorption_Processes = new InitialMass(sub);
          break;
        case "UZGroundWaterDepthList":
          _uZGroundWaterDepthList = new UZGroundWaterDepthList(sub);
          break;
        case "Initial_Conditions":
          _initial_Conditions = new Initial_Conditions(sub);
          break;
        case "SpecifiedClassification":
          _specifiedClassification = new Topography(sub);
          break;
        case "PartialAutomatic":
          _partialAutomatic = new Topography(sub);
          break;
          default:
            _unMappedSections.Add(sub.Name);
          break;
        }
      }
    }

    public UZSoilProfiles UZSoilProfiles
    {
     get { return _uZSoilProfiles; }
    }

    public TwoLayerUZSoilProperties TwoLayerUZSoilProperties
    {
     get { return _twoLayerUZSoilProperties; }
    }

    public Topography ETSurfaceDepth
    {
     get { return _eTSurfaceDepth; }
    }

    public InitialMass Macropore_Transfer_Coeff
    {
     get { return _macropore_Transfer_Coeff; }
    }

    public InitialMass Decay_Processes
    {
     get { return _decay_Processes; }
    }

    public InitialMass Sorption_Processes
    {
     get { return _sorption_Processes; }
    }

    public UZGroundWaterDepthList UZGroundWaterDepthList
    {
     get { return _uZGroundWaterDepthList; }
    }

    public Initial_Conditions Initial_Conditions
    {
     get { return _initial_Conditions; }
    }

    public Topography SpecifiedClassification
    {
     get { return _specifiedClassification; }
    }

    public Topography PartialAutomatic
    {
     get { return _partialAutomatic; }
    }

    public int Touched
    {
      get
      {
        return _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).Value = value;
      }
    }

    public int IsDataUsedInSetup
    {
      get
      {
        return _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).Value = value;
      }
    }

    public int Bypass
    {
      get
      {
        return _pfsHandle.GetKeyword("Bypass", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("Bypass", 1).GetParameter(1).Value = value;
      }
    }

    public int ClassificationType
    {
      get
      {
        return _pfsHandle.GetKeyword("ClassificationType", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("ClassificationType", 1).GetParameter(1).Value = value;
      }
    }

    public int InitialCondition
    {
      get
      {
        return _pfsHandle.GetKeyword("InitialCondition", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("InitialCondition", 1).GetParameter(1).Value = value;
      }
    }

    public int Max_MP_Infiltration_Per_TimeStep
    {
      get
      {
        return _pfsHandle.GetKeyword("Max_MP_Infiltration_Per_TimeStep", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("Max_MP_Infiltration_Per_TimeStep", 1).GetParameter(1).Value = value;
      }
    }

    public double Max_MP_Node_Exchange_Per_TimeStep
    {
      get
      {
        return _pfsHandle.GetKeyword("Max_MP_Node_Exchange_Per_TimeStep", 1).GetParameter(1).ToDouble();
      }
      set
      {
        _pfsHandle.GetKeyword("Max_MP_Node_Exchange_Per_TimeStep", 1).GetParameter(1).Value = value;
      }
    }

    public int Max_MP_Column_Exchange_Per_TimeStep
    {
      get
      {
        return _pfsHandle.GetKeyword("Max_MP_Column_Exchange_Per_TimeStep", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("Max_MP_Column_Exchange_Per_TimeStep", 1).GetParameter(1).Value = value;
      }
    }

    public int USE_Green_And_Ampt
    {
      get
      {
        return _pfsHandle.GetKeyword("USE_Green_And_Ampt", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("USE_Green_And_Ampt", 1).GetParameter(1).Value = value;
      }
    }

  }
}
