using System;
using System.Collections.Generic;
using DHI.Generic.MikeZero;

namespace MikeSheWrapper.InputFiles
{
  /// <summary>
  /// This is an autogenerated class. Do not edit. 
  /// If you want to add methods create a new partial class in another file
  /// </summary>
  public partial class ExtraParams: PFSMapper
  {

    private ExtraParam_1 _extraParam_1;
    private ExtraParam_1 _extraParam_2;
    private ExtraParam_1 _extraParam_3;
    private ExtraParam_1 _extraParam_4;

    internal ExtraParams(PFSSection Section)
    {
      _pfsHandle = Section;

      for (int i = 1; i <= Section.GetSectionsNo(); i++)
      {
        PFSSection sub = Section.GetSection(i);
        switch (sub.Name)
        {
        case "ExtraParam_1":
          _extraParam_1 = new ExtraParam_1(sub);
          break;
        case "ExtraParam_2":
          _extraParam_2 = new ExtraParam_1(sub);
          break;
        case "ExtraParam_3":
          _extraParam_3 = new ExtraParam_1(sub);
          break;
        case "ExtraParam_4":
          _extraParam_4 = new ExtraParam_1(sub);
          break;
          default:
            _unMappedSections.Add(sub.Name);
          break;
        }
      }
    }

    public ExtraParam_1 ExtraParam_1
    {
     get { return _extraParam_1; }
    }

    public ExtraParam_1 ExtraParam_2
    {
     get { return _extraParam_2; }
    }

    public ExtraParam_1 ExtraParam_3
    {
     get { return _extraParam_3; }
    }

    public ExtraParam_1 ExtraParam_4
    {
     get { return _extraParam_4; }
    }

    public int Touched
    {
      get
      {
        return _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).Value = value;
      }
    }

    public int IsDataUsedInSetup
    {
      get
      {
        return _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).Value = value;
      }
    }

    public int MzSEPfsListItemCount
    {
      get
      {
        return _pfsHandle.GetKeyword("MzSEPfsListItemCount", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("MzSEPfsListItemCount", 1).GetParameter(1).Value = value;
      }
    }

    public int NoOfParams
    {
      get
      {
        return _pfsHandle.GetKeyword("NoOfParams", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("NoOfParams", 1).GetParameter(1).Value = value;
      }
    }

  }
}
