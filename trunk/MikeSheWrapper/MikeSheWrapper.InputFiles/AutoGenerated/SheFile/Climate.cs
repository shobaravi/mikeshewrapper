using System;
using System.Collections.Generic;
using DHI.Generic.MikeZero;

namespace MikeSheWrapper.InputFiles
{
  /// <summary>
  /// This is an autogenerated class. Do not edit. 
  /// If you want to add methods create a new partial class in another file
  /// </summary>
  public partial class Climate: PFSMapper
  {

    private PrecipitationRate _precipitationRate;
    private Topography _precipLapseRate;
    private POTEVAPTRANS _pOTEVAPTRANS;
    private POTEVAPTRANS _sWSolarRadiation;
    private PrecipitationRate _airTemperature;
    private Topography _tempLapseRate;
    private Topography _wetLapseRate;
    private SNOWMELTCONST _sNOWMELTCONST;
    private Topography _netRainfallFraction;
    private Topography _infiltrationFraction;
    private Topography _rechargeFraction;
    private RechargeLayer _rechargeLayer;
    private RechargeLayer _pondingElevation;

    internal Climate(PFSSection Section)
    {
      _pfsHandle = Section;

      for (int i = 1; i <= Section.GetSectionsNo(); i++)
      {
        PFSSection sub = Section.GetSection(i);
        switch (sub.Name)
        {
        case "PrecipitationRate":
          _precipitationRate = new PrecipitationRate(sub);
          break;
        case "PrecipLapseRate":
          _precipLapseRate = new Topography(sub);
          break;
        case "POTEVAPTRANS":
          _pOTEVAPTRANS = new POTEVAPTRANS(sub);
          break;
        case "SWSolarRadiation":
          _sWSolarRadiation = new POTEVAPTRANS(sub);
          break;
        case "AirTemperature":
          _airTemperature = new PrecipitationRate(sub);
          break;
        case "TempLapseRate":
          _tempLapseRate = new Topography(sub);
          break;
        case "WetLapseRate":
          _wetLapseRate = new Topography(sub);
          break;
        case "SNOWMELTCONST":
          _sNOWMELTCONST = new SNOWMELTCONST(sub);
          break;
        case "NetRainfallFraction":
          _netRainfallFraction = new Topography(sub);
          break;
        case "InfiltrationFraction":
          _infiltrationFraction = new Topography(sub);
          break;
        case "RechargeFraction":
          _rechargeFraction = new Topography(sub);
          break;
        case "RechargeLayer":
          _rechargeLayer = new RechargeLayer(sub);
          break;
        case "PondingElevation":
          _pondingElevation = new RechargeLayer(sub);
          break;
          default:
            _unMappedSections.Add(sub.Name);
          break;
        }
      }
    }

    public PrecipitationRate PrecipitationRate
    {
     get { return _precipitationRate; }
    }

    public Topography PrecipLapseRate
    {
     get { return _precipLapseRate; }
    }

    public POTEVAPTRANS POTEVAPTRANS
    {
     get { return _pOTEVAPTRANS; }
    }

    public POTEVAPTRANS SWSolarRadiation
    {
     get { return _sWSolarRadiation; }
    }

    public PrecipitationRate AirTemperature
    {
     get { return _airTemperature; }
    }

    public Topography TempLapseRate
    {
     get { return _tempLapseRate; }
    }

    public Topography WetLapseRate
    {
     get { return _wetLapseRate; }
    }

    public SNOWMELTCONST SNOWMELTCONST
    {
     get { return _sNOWMELTCONST; }
    }

    public Topography NetRainfallFraction
    {
     get { return _netRainfallFraction; }
    }

    public Topography InfiltrationFraction
    {
     get { return _infiltrationFraction; }
    }

    public Topography RechargeFraction
    {
     get { return _rechargeFraction; }
    }

    public RechargeLayer RechargeLayer
    {
     get { return _rechargeLayer; }
    }

    public RechargeLayer PondingElevation
    {
     get { return _pondingElevation; }
    }

    public int Touched
    {
      get
      {
        return _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).Value = value;
      }
    }

    public int IsDataUsedInSetup
    {
      get
      {
        return _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).Value = value;
      }
    }

    public int SM
    {
      get
      {
        return _pfsHandle.GetKeyword("SM", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("SM", 1).GetParameter(1).Value = value;
      }
    }

    public int CorrectPrecipitation
    {
      get
      {
        return _pfsHandle.GetKeyword("CorrectPrecipitation", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("CorrectPrecipitation", 1).GetParameter(1).Value = value;
      }
    }

    public int CorrectAirTemperature
    {
      get
      {
        return _pfsHandle.GetKeyword("CorrectAirTemperature", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("CorrectAirTemperature", 1).GetParameter(1).Value = value;
      }
    }

    public int UseWetDryLapseRate
    {
      get
      {
        return _pfsHandle.GetKeyword("UseWetDryLapseRate", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("UseWetDryLapseRate", 1).GetParameter(1).Value = value;
      }
    }

    public int IncludeSolarRadiation
    {
      get
      {
        return _pfsHandle.GetKeyword("IncludeSolarRadiation", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("IncludeSolarRadiation", 1).GetParameter(1).Value = value;
      }
    }

    public int RechargeOption
    {
      get
      {
        return _pfsHandle.GetKeyword("RechargeOption", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("RechargeOption", 1).GetParameter(1).Value = value;
      }
    }

    public int PondingOption
    {
      get
      {
        return _pfsHandle.GetKeyword("PondingOption", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("PondingOption", 1).GetParameter(1).Value = value;
      }
    }

  }
}
