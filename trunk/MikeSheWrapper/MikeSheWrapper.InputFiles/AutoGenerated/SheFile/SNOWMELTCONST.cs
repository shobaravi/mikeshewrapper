using System;
using System.Collections.Generic;
using DHI.Generic.MikeZero;

namespace MikeSheWrapper.InputFiles
{
  /// <summary>
  /// This is an autogenerated class. Do not edit. 
  /// If you want to add methods create a new partial class in another file
  /// </summary>
  public partial class SNOWMELTCONST: PFSMapper
  {

    private Topography _threshMeltTemp;
    private POTEVAPTRANS _degreeDayFactor;
    private Topography _radMeltingCoeff;
    private Topography _minSnowStorage;
    private Topography _maxWetSnowFrac;
    private Topography _initialSnowStorage;
    private Topography _initialWetSnowFrac;

    internal SNOWMELTCONST(PFSSection Section)
    {
      _pfsHandle = Section;

      for (int i = 1; i <= Section.GetSectionsNo(); i++)
      {
        PFSSection sub = Section.GetSection(i);
        switch (sub.Name)
        {
        case "ThreshMeltTemp":
          _threshMeltTemp = new Topography(sub);
          break;
        case "DegreeDayFactor":
          _degreeDayFactor = new POTEVAPTRANS(sub);
          break;
        case "RadMeltingCoeff":
          _radMeltingCoeff = new Topography(sub);
          break;
        case "MinSnowStorage":
          _minSnowStorage = new Topography(sub);
          break;
        case "MaxWetSnowFrac":
          _maxWetSnowFrac = new Topography(sub);
          break;
        case "InitialSnowStorage":
          _initialSnowStorage = new Topography(sub);
          break;
        case "InitialWetSnowFrac":
          _initialWetSnowFrac = new Topography(sub);
          break;
          default:
            _unMappedSections.Add(sub.Name);
          break;
        }
      }
    }

    public Topography ThreshMeltTemp
    {
     get { return _threshMeltTemp; }
    }

    public POTEVAPTRANS DegreeDayFactor
    {
     get { return _degreeDayFactor; }
    }

    public Topography RadMeltingCoeff
    {
     get { return _radMeltingCoeff; }
    }

    public Topography MinSnowStorage
    {
     get { return _minSnowStorage; }
    }

    public Topography MaxWetSnowFrac
    {
     get { return _maxWetSnowFrac; }
    }

    public Topography InitialSnowStorage
    {
     get { return _initialSnowStorage; }
    }

    public Topography InitialWetSnowFrac
    {
     get { return _initialWetSnowFrac; }
    }

    public int Touched
    {
      get
      {
        return _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).Value = value;
      }
    }

    public int IsDataUsedInSetup
    {
      get
      {
        return _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).Value = value;
      }
    }

    public int ThermalMelt
    {
      get
      {
        return _pfsHandle.GetKeyword("ThermalMelt", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("ThermalMelt", 1).GetParameter(1).Value = value;
      }
    }

    public double MeltCoefficient
    {
      get
      {
        return _pfsHandle.GetKeyword("MeltCoefficient", 1).GetParameter(1).ToDouble();
      }
      set
      {
        _pfsHandle.GetKeyword("MeltCoefficient", 1).GetParameter(1).Value = value;
      }
    }

    public int SublimationRate
    {
      get
      {
        return _pfsHandle.GetKeyword("SublimationRate", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("SublimationRate", 1).GetParameter(1).Value = value;
      }
    }

  }
}
