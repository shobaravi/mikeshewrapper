using System;
using System.Collections.Generic;
using DHI.Generic.MikeZero;

namespace MikeSheWrapper.InputFiles
{
  /// <summary>
  /// This is an autogenerated class. Do not edit. 
  /// If you want to add methods create a new partial class in another file
  /// </summary>
  public partial class Overland: PFSMapper
  {

    private Topography _manning;
    private Topography _detentionStorage;
    private Topography _initialWaterDepth;
    private Topography _leakageCoeff;
    private Topography _separatedFlowAreas;
    private InitialMass _initialMass;
    private Topography _dispersionCoeff_X;
    private Topography _dispersionCoeff_Y;
    private InitialMass _decay_Processes;

    internal Overland(PFSSection Section)
    {
      _pfsHandle = Section;

      for (int i = 1; i <= Section.GetSectionsNo(); i++)
      {
        PFSSection sub = Section.GetSection(i);
        switch (sub.Name)
        {
        case "Manning":
          _manning = new Topography(sub);
          break;
        case "DetentionStorage":
          _detentionStorage = new Topography(sub);
          break;
        case "InitialWaterDepth":
          _initialWaterDepth = new Topography(sub);
          break;
        case "LeakageCoeff":
          _leakageCoeff = new Topography(sub);
          break;
        case "SeparatedFlowAreas":
          _separatedFlowAreas = new Topography(sub);
          break;
        case "InitialMass":
          _initialMass = new InitialMass(sub);
          break;
        case "DispersionCoeff_X":
          _dispersionCoeff_X = new Topography(sub);
          break;
        case "DispersionCoeff_Y":
          _dispersionCoeff_Y = new Topography(sub);
          break;
        case "Decay_Processes":
          _decay_Processes = new InitialMass(sub);
          break;
          default:
            _unMappedSections.Add(sub.Name);
          break;
        }
      }
    }

    public Topography Manning
    {
     get { return _manning; }
    }

    public Topography DetentionStorage
    {
     get { return _detentionStorage; }
    }

    public Topography InitialWaterDepth
    {
     get { return _initialWaterDepth; }
    }

    public Topography LeakageCoeff
    {
     get { return _leakageCoeff; }
    }

    public Topography SeparatedFlowAreas
    {
     get { return _separatedFlowAreas; }
    }

    public InitialMass InitialMass
    {
     get { return _initialMass; }
    }

    public Topography DispersionCoeff_X
    {
     get { return _dispersionCoeff_X; }
    }

    public Topography DispersionCoeff_Y
    {
     get { return _dispersionCoeff_Y; }
    }

    public InitialMass Decay_Processes
    {
     get { return _decay_Processes; }
    }

    public int Touched
    {
      get
      {
        return _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).Value = value;
      }
    }

    public int IsDataUsedInSetup
    {
      get
      {
        return _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).Value = value;
      }
    }

    public int SeparatedFlowAreas1
    {
      get
      {
        return _pfsHandle.GetKeyword("SeparatedFlowAreas", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("SeparatedFlowAreas", 1).GetParameter(1).Value = value;
      }
    }

    public int OverlandGroundWaterExchangeOption
    {
      get
      {
        return _pfsHandle.GetKeyword("OverlandGroundWaterExchangeOption", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("OverlandGroundWaterExchangeOption", 1).GetParameter(1).Value = value;
      }
    }

  }
}
