using System;
using System.Collections.Generic;
using DHI.Generic.MikeZero;

namespace MikeSheWrapper.InputFiles
{
  /// <summary>
  /// This is an autogenerated class. Do not edit. 
  /// If you want to add methods create a new partial class in another file
  /// </summary>
  public partial class ModelCompWQ: PFSMapper
  {

    private SimTitle _simTitleWQ;
    private SimulationPeriodWQ _simulationPeriodWQ;
    private WQTSC _wQTSC;
    private ColloidControlPara _colloidControlPara;

    internal ModelCompWQ(PFSSection Section)
    {
      _pfsHandle = Section;

      for (int i = 1; i <= Section.GetSectionsNo(); i++)
      {
        PFSSection sub = Section.GetSection(i);
        switch (sub.Name)
        {
        case "SimTitleWQ":
          _simTitleWQ = new SimTitle(sub);
          break;
        case "SimulationPeriodWQ":
          _simulationPeriodWQ = new SimulationPeriodWQ(sub);
          break;
        case "WQTSC":
          _wQTSC = new WQTSC(sub);
          break;
        case "ColloidControlPara":
          _colloidControlPara = new ColloidControlPara(sub);
          break;
          default:
            _unMappedSections.Add(sub.Name);
          break;
        }
      }
    }

    public SimTitle SimTitleWQ
    {
     get { return _simTitleWQ; }
    }

    public SimulationPeriodWQ SimulationPeriodWQ
    {
     get { return _simulationPeriodWQ; }
    }

    public WQTSC WQTSC
    {
     get { return _wQTSC; }
    }

    public ColloidControlPara ColloidControlPara
    {
     get { return _colloidControlPara; }
    }

    public int Touched
    {
      get
      {
        return _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).Value = value;
      }
    }

    public int IsDataUsedInSetup
    {
      get
      {
        return _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).Value = value;
      }
    }

    public int OL
    {
      get
      {
        return _pfsHandle.GetKeyword("OL", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("OL", 1).GetParameter(1).Value = value;
      }
    }

    public int River
    {
      get
      {
        return _pfsHandle.GetKeyword("River", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("River", 1).GetParameter(1).Value = value;
      }
    }

    public int UZ
    {
      get
      {
        return _pfsHandle.GetKeyword("UZ", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("UZ", 1).GetParameter(1).Value = value;
      }
    }

    public int PlantUptake
    {
      get
      {
        return _pfsHandle.GetKeyword("PlantUptake", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("PlantUptake", 1).GetParameter(1).Value = value;
      }
    }

    public int SZ
    {
      get
      {
        return _pfsHandle.GetKeyword("SZ", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("SZ", 1).GetParameter(1).Value = value;
      }
    }

    public int IncludeProcesses
    {
      get
      {
        return _pfsHandle.GetKeyword("IncludeProcesses", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("IncludeProcesses", 1).GetParameter(1).Value = value;
      }
    }

    public int ProcessType
    {
      get
      {
        return _pfsHandle.GetKeyword("ProcessType", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("ProcessType", 1).GetParameter(1).Value = value;
      }
    }

  }
}
