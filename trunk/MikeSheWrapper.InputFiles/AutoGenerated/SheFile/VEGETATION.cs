using System;
using System.Collections.Generic;
using DHI.Generic.MikeZero;

namespace MikeSheWrapper.InputFiles
{
  /// <summary>
  /// This is an autogenerated class. Do not edit. 
  /// If you want to add methods create a new partial class in another file
  /// </summary>
  public partial class VEGETATION: PFSMapper
  {

    private GLOBAL1 _gLOBAL;
    private STATION_BASED _sTATION_BASED;
    private FULLY_DISTRIBUTED1 _fULLY_DISTRIBUTED;

    internal VEGETATION(PFSSection Section)
    {
      _pfsHandle = Section;

      for (int i = 1; i <= Section.GetSectionsNo(); i++)
      {
        PFSSection sub = Section.GetSection(i);
        switch (sub.Name)
        {
        case "GLOBAL":
          _gLOBAL = new GLOBAL1(sub);
          break;
        case "STATION_BASED":
          _sTATION_BASED = new STATION_BASED(sub);
          break;
        case "FULLY_DISTRIBUTED":
          _fULLY_DISTRIBUTED = new FULLY_DISTRIBUTED1(sub);
          break;
          default:
            _unMappedSections.Add(sub.Name);
          break;
        }
      }
    }

    public GLOBAL1 GLOBAL
    {
     get { return _gLOBAL; }
    }

    public STATION_BASED STATION_BASED
    {
     get { return _sTATION_BASED; }
    }

    public FULLY_DISTRIBUTED1 FULLY_DISTRIBUTED
    {
     get { return _fULLY_DISTRIBUTED; }
    }

    public int Touched
    {
      get
      {
        return _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).Value = value;
      }
    }

    public int IsDataUsedInSetup
    {
      get
      {
        return _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).Value = value;
      }
    }

    public int DistributionType
    {
      get
      {
        return _pfsHandle.GetKeyword("DistributionType", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("DistributionType", 1).GetParameter(1).Value = value;
      }
    }

    public double C1
    {
      get
      {
        return _pfsHandle.GetKeyword("C1", 1).GetParameter(1).ToDouble();
      }
      set
      {
        _pfsHandle.GetKeyword("C1", 1).GetParameter(1).Value = value;
      }
    }

    public double C2
    {
      get
      {
        return _pfsHandle.GetKeyword("C2", 1).GetParameter(1).ToDouble();
      }
      set
      {
        _pfsHandle.GetKeyword("C2", 1).GetParameter(1).Value = value;
      }
    }

    public int C3
    {
      get
      {
        return _pfsHandle.GetKeyword("C3", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("C3", 1).GetParameter(1).Value = value;
      }
    }

    public double C_INT
    {
      get
      {
        return _pfsHandle.GetKeyword("C_INT", 1).GetParameter(1).ToDouble();
      }
      set
      {
        _pfsHandle.GetKeyword("C_INT", 1).GetParameter(1).Value = value;
      }
    }

    public double A_ROOT
    {
      get
      {
        return _pfsHandle.GetKeyword("A_ROOT", 1).GetParameter(1).ToDouble();
      }
      set
      {
        _pfsHandle.GetKeyword("A_ROOT", 1).GetParameter(1).Value = value;
      }
    }

    public int ETReduced
    {
      get
      {
        return _pfsHandle.GetKeyword("ETReduced", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("ETReduced", 1).GetParameter(1).Value = value;
      }
    }

  }
}
