using System;
using System.Collections.Generic;
using DHI.Generic.MikeZero;

namespace MikeSheWrapper.InputFiles
{
  /// <summary>
  /// This is an autogenerated class. Do not edit. 
  /// If you want to add methods create a new partial class in another file
  /// </summary>
  public partial class Lense_1: PFSMapper
  {

    private Topography _horBoundary;
    private Bathymetry _upperLevel;
    private Bathymetry _lowerLevel;
    private Topography _geoUnit;
    private Topography _horHydrCon;
    private Topography _verHydrCon;
    private Topography _specificYield;
    private Topography _storageCoef;
    private Topography _hydrHeadUsedForAirFlow;
    private Topography _wettingThreshold;
    private Topography _horizontalAnisotropyRatio;
    private Topography _vanGenuchtenAlpha;
    private Topography _vanGenuchtenBeta;
    private Topography _residualSaturation;
    private Topography _brooksCoreyRelativePermeabilityExponent;
    private Topography _porosity;
    private Topography _matrixPorosity;
    private Topography _bulkDensity;
    private Topography _lHHDispCoeff;
    private Topography _tHHDispCoeff;
    private Topography _tVHDispCoeff;
    private Topography _lVVDispCoeff;
    private Topography _tHVDispCoeff;

    internal Lense_1(PFSSection Section)
    {
      _pfsHandle = Section;

      for (int i = 1; i <= Section.GetSectionsNo(); i++)
      {
        PFSSection sub = Section.GetSection(i);
        switch (sub.Name)
        {
        case "HorBoundary":
          _horBoundary = new Topography(sub);
          break;
        case "UpperLevel":
          _upperLevel = new Bathymetry(sub);
          break;
        case "LowerLevel":
          _lowerLevel = new Bathymetry(sub);
          break;
        case "GeoUnit":
          _geoUnit = new Topography(sub);
          break;
        case "HorHydrCon":
          _horHydrCon = new Topography(sub);
          break;
        case "VerHydrCon":
          _verHydrCon = new Topography(sub);
          break;
        case "SpecificYield":
          _specificYield = new Topography(sub);
          break;
        case "StorageCoef":
          _storageCoef = new Topography(sub);
          break;
        case "HydrHeadUsedForAirFlow":
          _hydrHeadUsedForAirFlow = new Topography(sub);
          break;
        case "WettingThreshold":
          _wettingThreshold = new Topography(sub);
          break;
        case "HorizontalAnisotropyRatio":
          _horizontalAnisotropyRatio = new Topography(sub);
          break;
        case "VanGenuchtenAlpha":
          _vanGenuchtenAlpha = new Topography(sub);
          break;
        case "VanGenuchtenBeta":
          _vanGenuchtenBeta = new Topography(sub);
          break;
        case "ResidualSaturation":
          _residualSaturation = new Topography(sub);
          break;
        case "BrooksCoreyRelativePermeabilityExponent":
          _brooksCoreyRelativePermeabilityExponent = new Topography(sub);
          break;
        case "Porosity":
          _porosity = new Topography(sub);
          break;
        case "MatrixPorosity":
          _matrixPorosity = new Topography(sub);
          break;
        case "BulkDensity":
          _bulkDensity = new Topography(sub);
          break;
        case "LHHDispCoeff":
          _lHHDispCoeff = new Topography(sub);
          break;
        case "THHDispCoeff":
          _tHHDispCoeff = new Topography(sub);
          break;
        case "TVHDispCoeff":
          _tVHDispCoeff = new Topography(sub);
          break;
        case "LVVDispCoeff":
          _lVVDispCoeff = new Topography(sub);
          break;
        case "THVDispCoeff":
          _tHVDispCoeff = new Topography(sub);
          break;
          default:
            _unMappedSections.Add(sub.Name);
          break;
        }
      }
    }

    public Topography HorBoundary
    {
     get { return _horBoundary; }
    }

    public Bathymetry UpperLevel
    {
     get { return _upperLevel; }
    }

    public Bathymetry LowerLevel
    {
     get { return _lowerLevel; }
    }

    public Topography GeoUnit
    {
     get { return _geoUnit; }
    }

    public Topography HorHydrCon
    {
     get { return _horHydrCon; }
    }

    public Topography VerHydrCon
    {
     get { return _verHydrCon; }
    }

    public Topography SpecificYield
    {
     get { return _specificYield; }
    }

    public Topography StorageCoef
    {
     get { return _storageCoef; }
    }

    public Topography HydrHeadUsedForAirFlow
    {
     get { return _hydrHeadUsedForAirFlow; }
    }

    public Topography WettingThreshold
    {
     get { return _wettingThreshold; }
    }

    public Topography HorizontalAnisotropyRatio
    {
     get { return _horizontalAnisotropyRatio; }
    }

    public Topography VanGenuchtenAlpha
    {
     get { return _vanGenuchtenAlpha; }
    }

    public Topography VanGenuchtenBeta
    {
     get { return _vanGenuchtenBeta; }
    }

    public Topography ResidualSaturation
    {
     get { return _residualSaturation; }
    }

    public Topography BrooksCoreyRelativePermeabilityExponent
    {
     get { return _brooksCoreyRelativePermeabilityExponent; }
    }

    public Topography Porosity
    {
     get { return _porosity; }
    }

    public Topography MatrixPorosity
    {
     get { return _matrixPorosity; }
    }

    public Topography BulkDensity
    {
     get { return _bulkDensity; }
    }

    public Topography LHHDispCoeff
    {
     get { return _lHHDispCoeff; }
    }

    public Topography THHDispCoeff
    {
     get { return _tHHDispCoeff; }
    }

    public Topography TVHDispCoeff
    {
     get { return _tVHDispCoeff; }
    }

    public Topography LVVDispCoeff
    {
     get { return _lVVDispCoeff; }
    }

    public Topography THVDispCoeff
    {
     get { return _tHVDispCoeff; }
    }

    public string Name
    {
      get
      {
        return _pfsHandle.GetKeyword("Name", 1).GetParameter(1).ToString();
      }
      set
      {
        _pfsHandle.GetKeyword("Name", 1).GetParameter(1).Value = value;
      }
    }

  }
}
