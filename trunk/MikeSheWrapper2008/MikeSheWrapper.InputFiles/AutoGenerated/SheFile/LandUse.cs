using System;
using System.Collections.Generic;
using DHI.Generic.MikeZero;

namespace MikeSheWrapper.InputFiles
{
  /// <summary>
  /// This is an autogenerated class. Do not edit. 
  /// If you want to add methods create a new partial class in another file
  /// </summary>
  public partial class LandUse: PFSMapper
  {

    private VEGETATION _vEGETATION;
    private CommandAreas _commandAreas;
    private Demands _demands;
    private Priorities _priorities;
    private Topography _pavedRunoffCoefficient;

    internal LandUse(PFSSection Section)
    {
      _pfsHandle = Section;

      for (int i = 1; i <= Section.GetSectionsNo(); i++)
      {
        PFSSection sub = Section.GetSection(i);
        switch (sub.Name)
        {
        case "VEGETATION":
          _vEGETATION = new VEGETATION(sub);
          break;
        case "CommandAreas":
          _commandAreas = new CommandAreas(sub);
          break;
        case "Demands":
          _demands = new Demands(sub);
          break;
        case "Priorities":
          _priorities = new Priorities(sub);
          break;
        case "PavedRunoffCoefficient":
          _pavedRunoffCoefficient = new Topography(sub);
          break;
          default:
            _unMappedSections.Add(sub.Name);
          break;
        }
      }
    }

    public VEGETATION VEGETATION
    {
     get { return _vEGETATION; }
    }

    public CommandAreas CommandAreas
    {
     get { return _commandAreas; }
    }

    public Demands Demands
    {
     get { return _demands; }
    }

    public Priorities Priorities
    {
     get { return _priorities; }
    }

    public Topography PavedRunoffCoefficient
    {
     get { return _pavedRunoffCoefficient; }
    }

    public int Touched
    {
      get
      {
        return _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("Touched", 1).GetParameter(1).Value = value;
      }
    }

    public int IsDataUsedInSetup
    {
      get
      {
        return _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("IsDataUsedInSetup", 1).GetParameter(1).Value = value;
      }
    }

    public int Paved
    {
      get
      {
        return _pfsHandle.GetKeyword("Paved", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("Paved", 1).GetParameter(1).Value = value;
      }
    }

    public int Irrigation
    {
      get
      {
        return _pfsHandle.GetKeyword("Irrigation", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("Irrigation", 1).GetParameter(1).Value = value;
      }
    }

    public int PavedGradientCheck
    {
      get
      {
        return _pfsHandle.GetKeyword("PavedGradientCheck", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("PavedGradientCheck", 1).GetParameter(1).Value = value;
      }
    }

    public int Priorities1
    {
      get
      {
        return _pfsHandle.GetKeyword("Priorities", 1).GetParameter(1).ToInt();
      }
      set
      {
        _pfsHandle.GetKeyword("Priorities", 1).GetParameter(1).Value = value;
      }
    }

  }
}
